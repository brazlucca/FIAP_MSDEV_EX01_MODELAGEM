openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: sales
    description: Everything about Sales
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: retailer
    description: Everything about Retailer
    externalDocs:
      description: Find out more
      url: http://swagger.io    
  - name: retailer-inventory
    description: Everything about Retailer Inventory
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: shipment-order
    description: Everything about Shipment Order
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: warehouse
    description: Everything about Warehouse
    externalDocs:
      description: Find out more
      url: http://swagger.io       
  - name: warehouse-inventory
    description: Everything about Warehouse Inventory
    externalDocs:
      description: Find out more
      url: http://swagger.io      
  - name: carrier
    description: Everything about Carrier
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: product
    description: Everything about Product
    externalDocs:
      description: Find out more
      url: http://swagger.io  
  - name: supplier
    description: Everything about Supplier
    externalDocs:
      description: Find out more
      url: http://swagger.io  

paths:
  /sales:
    post:
      tags:
        - sales
      summary: Create a new sale
      description: Create a new sale
      operationId: createSale
      requestBody:
        description: Create a sale
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesData'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesData'          
        '400':
          description: Invalid input
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtvc
  /sales/{salesId}:
    get:
      tags:
        - sales
      summary: Get sale
      description: This can only be done by the logged in user.
      operationId: getSale
      parameters:
        - name: salesId
          in: path
          description: id to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Retailer'          
        '404':
          description: Not found       
  /retailer:
    post:
      tags:
        - retailer
      summary: Create a new retailer
      description: Create a new retailer
      operationId: createRetailer
      requestBody:
        description: Create a new retailer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Retailer'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Retailer'          
        '400':
          description: Invalid input
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtvc          
  /retailer/{retailerId}:
    put:
      tags:
        - retailer
      summary: Update retailer
      description: This can only be done by the logged in user.
      operationId: updateRetailer
      parameters:
        - name: retailerId
          in: path
          description: id to update
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent retailer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Retailer'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Retailer'
        '400':
          description: Invalid input
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtv    
    get:
      tags:
        - retailer
      summary: Get retailer
      description: This can only be done by the logged in user.
      operationId: getRetailer
      parameters:
        - name: retailerId
          in: path
          description: id to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Retailer'
        '404':
          description: Not Found
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtv    
    delete:
      tags:
        - retailer
      summary: Delete retailer
      description: This can only be done by the logged in user.
      operationId: deleteRetailer
      parameters:
        - name: retailerId
          in: path
          description: id to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtv    
  /retailer-inventory:
    post:
      tags:
        - retailer-inventory
      summary: Create a new sale
      description: Create a new sale
      operationId: createRetailerInventory
      requestBody:
        description: Create a sale
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetailerInventory'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetailerInventory'          
        '405':
          description: Invalid input
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtvc  
  /retailer-inventory/{retailerInventoryId}:
    put:
      tags:
        - retailer-inventory
      summary: Update retailer-inventory
      description: This can only be done by the logged in user.
      operationId: updateRetailerInventory
      parameters:
        - name: retailerInventoryId
          in: path
          description: id to update
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent Retailer inventory
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetailerInventory'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetailerInventory'
        '400':
          description: Invalid input
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtv    
    get:
      tags:
        - retailer-inventory
      summary: Get Retailer inventory
      description: This can only be done by the logged in user.
      operationId: getRetailerInventory
      parameters:
        - name: retailerInventoryId
          in: path
          description: id to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetailerInventory'
        '404':
          description: Not Found
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtvc   
    delete:
      tags:
        - retailer-inventory
      summary: Delete retailer inventory
      description: This can only be done by the logged in user.
      operationId: deleteRetailerInventory
      parameters:
        - name: retailerInventoryId
          in: path
          description: id to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtv      
  /shipment-order:
    post:
      tags:
        - shipment-order
      summary: Create a Shipment Order
      description: Create a Create a Shipment Order
      operationId: createShipmentOrder
      requestBody:
        description: Create a Shipment Order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShipmentOrder'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShipmentOrder'          
        '400':
          description: Invalid input
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtvc  
  /shipment-order/{shipmentOrderId}:
    get:
      tags:
        - shipment-order
      summary: Get Shipment Order
      description: This can only be done by the logged in user.
      operationId: getShipmentOrder
      parameters:
        - name: shipmentOrderId
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShipmentOrder'
        '404':
          description: Not Found        
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtvc          
  /warehouse:
    post:
      tags:
        - warehouse
      summary: Create a Warehouse
      description: Create a Warehouse
      operationId: createWarehouse
      requestBody:
        description: Create a Warehouse
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Warehouse'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warehouse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Warehouse'
        '405':
          description: Invalid input
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtvc  
  /warehouse/{warehouseId}:
    put:
      tags:
        - warehouse
      summary: Update warehouse
      description: This can only be done by the logged in user.
      operationId: updateWarehouse
      parameters:
        - name: warehouseId
          in: path
          description: id to update
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent WarehouseId inventory
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Warehouse'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warehouse'
        '400':
          description: Invalid input
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtv    
    get:
      tags:
        - warehouse
      summary: Get warehouse
      description: This can only be done by the logged in user.
      operationId: getWarehouse
      parameters:
        - name: warehouseId
          in: path
          description: id to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warehouse'
        '404':
          description: Not Found
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtvc   
    delete:
      tags:
        - warehouse
      summary: Delete Warehouse
      description: This can only be done by the logged in user.
      operationId: deleteWarehouse
      parameters:
        - name: warehouseId
          in: path
          description: id to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtv      
  /warehouse-inventory:
    post:
      tags:
        - warehouse-inventory
      summary: Create a Warehouse Inventory
      description: Create a Warehouse Inventory
      operationId: createWarehouseInventory
      requestBody:
        description: Create a Warehouse Inventory
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarehouseInventory'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseInventory'          
        '400':
          description: Invalid input
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtvc  
  /warehouse-inventory/{warehouseInventoryId}:
    put:
      tags:
        - warehouse-inventory
      summary: Update Warehouse Inventory
      description: This can only be done by the logged in user.
      operationId: updateWarehouseInventory
      parameters:
        - name: warehouseInventoryId
          in: path
          description: id to update
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent Warehouse Inventory
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarehouseInventory'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseInventory'
        '400':
          description: Invalid input
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtv    
    get:
      tags:
        - warehouse-inventory
      summary: Get Warehouse Inventory
      description: This can only be done by the logged in user.
      operationId: getWarehouseInventory
      parameters:
        - name: warehouseInventoryId
          in: path
          description: id to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseInventory'
        '404':
          description: Not Found
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtvc   
    delete:
      tags:
        - warehouse-inventory
      summary: Delete warehouse-inventory
      description: This can only be done by the logged in user.
      operationId: deleteWarehouseInventory
      parameters:
        - name: warehouseInventoryId
          in: path
          description: id to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtv      
  /carrier:
    post:
      tags:
        - carrier
      summary: Create a Carrier
      description: Create a Carrier
      operationId: createCarrier
      requestBody:
        description: Create a Carrier
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Carrier'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Carrier'          
        '400':
          description: Invalid input
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtvc  
  /carrier/{carrierId}:
    put:
      tags:
        - carrier
      summary: Update Carrier
      description: This can only be done by the logged in user.
      operationId: updateCarrier
      parameters:
        - name: carrierId
          in: path
          description: id to update
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent Warehouse Inventory
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Carrier'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Carrier'
        '400':
          description: Invalid input
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtv    
    get:
      tags:
        - carrier
      summary: Get Carrier
      description: This can only be done by the logged in user.
      operationId: getCarrier
      parameters:
        - name: carrierId
          in: path
          description: id to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Carrier'
        '404':
          description: Not Found
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtvc   
    delete:
      tags:
        - carrier
      summary: Delete Carrier
      description: This can only be done by the logged in user.
      operationId: deleteCarrier
      parameters:
        - name: carrierId
          in: path
          description: id to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtv      
  /supplier:
    post:
      tags:
        - supplier
      summary: Create a Supplier
      description: Create a Supplier
      operationId: createSupplier
      requestBody:
        description: Create a Supplier
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Supplier'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'          
        '400':
          description: Invalid input
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtvc  
  /supplier/{supplierId}:
    put:
      tags:
        - supplier
      summary: Update Supplier
      description: This can only be done by the logged in user.
      operationId: updateSupplier
      parameters:
        - name: supplierId
          in: path
          description: id to update
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent Supplier
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Supplier'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        '400':
          description: Invalid input
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtv    
    get:
      tags:
        - supplier
      summary: Get Supplier
      description: This can only be done by the logged in user.
      operationId: getSupplier
      parameters:
        - name: supplierId
          in: path
          description: id to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        '404':
          description: Not Found
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtvc   
    delete:
      tags:
        - supplier
      summary: Delete Supplier
      description: This can only be done by the logged in user.
      operationId: deleteSupplier
      parameters:
        - name: supplierId
          in: path
          description: id to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtv      
  /product:
    post:
      tags:
        - product
      summary: Create a Product
      description: Create a Product
      operationId: createProduct
      requestBody:
        description: Create a Product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'          
        '400':
          description: Invalid input
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtvc  
  /product/{productId}:
    put:
      tags:
        - product
      summary: Update Product
      description: This can only be done by the logged in user.
      operationId: updateProduct
      parameters:
        - name: productId
          in: path
          description: id to update
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent Product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtv    
    get:
      tags:
        - product
      summary: Get Product
      description: This can only be done by the logged in user.
      operationId: getProduct
      parameters:
        - name: productId
          in: path
          description: id to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Not Found
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtvc   
    delete:
      tags:
        - product
      summary: Delete Product
      description: This can only be done by the logged in user.
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          description: id to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
      security:
        - retailvaluechain_auth:
            - write:rtvc
            - read:rtv      

components:
  schemas:
    Address:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        zipcode:
          type: string
          example: '123456-78'
        country:
          type: string
          example: Brazil
        city:
          type: string
          example: 'São Paulo'
        neighborhood:
          type: string
          example: 'Jadrins'
        street:
          type: string
          example: 'Avenida Paulista'
        number:
          type: integer
          format: int32
          example: 1000 
      xml:
        name: address
    Carrier:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        description:
          type: string
          example: 'Description'
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        supplierId:
          type: integer
          format: int64
          example: 123456  
        description:
          type: string
          example: 'Description'
        price:
          type: number
          format: double
          example: '10.00'
    PurchaseOrder:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        retailerId:
          type: integer
          format: int64
          example: 123456
        address:
          $ref: '#/components/schemas/Address' 
        supplierId:
          type: integer
          format: int64
          example: 123456  
        items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderItem'  
        datetime:
          type: string
          description: RFC3339 Datetime to set
          format: date-time
          example: "2021-06-20T01:02:03+00:00"
    PurchaseOrderItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        productId:
          type: integer
          format: int64
          example: 123456  
        quantity:
          type: integer
          format: int32
          example: 123456 
    Retailer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        description:
          type: string
          example: '123456'
        address:
          $ref: '#/components/schemas/Address' 
    RetailerInventory:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        retailerId:
          type: integer
          format: int64
          example: 123456
        productId:
          type: integer
          format: int64
          example: 123456
        quantity:
          type: integer
          format: int32
          example: 123456  
    SalesData:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        clientId:
          type: integer
          format: int64
          example: 123456
        salesPrice:
          type: number
          format: double
          example: '10.01'  
        salesDate:
          type: string
          description: RFC3339 Datetime to set
          format: date-time
          example: "2022-10-20T12:30:30+00:00"
        items:
          type: array
          items:
            $ref: '#/components/schemas/SalesDataItem'  
    SalesDataItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        productId:
          type: integer
          format: int64
          example: 123456
        quantity:
          type: integer
          format: int32
          example: 123456
        price:
          type: number
          format: double
          example: '10.01'   
    ShipmentOrder:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        type:
          #ENUM
          type: integer
          format: int64
          example: 123456
        carrierId:
          type: integer
          format: int64
          example: 123456
        retailerId:
          type: integer
          format: int64
          example: 123456
        warehouseId:
          type: integer
          format: int64
          example: 123456
        senderAddress:
          $ref: '#/components/schemas/Address'
        recipientAddress:
          $ref: '#/components/schemas/Address'  
        status:
          #ENUM
          type: integer
          format: int64
          example: 123456
        items:
          type: array
          items:
            $ref: '#/components/schemas/ShipmentOrderItem'
    ShipmentOrderItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        purchaseOrderItemId:
          type: integer
          format: int64
          example: 123456
    Supplier:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        description:
          type: string
          example: 'description'
    Warehouse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        description:
          type: string
          example: 'description'
        address:
          $ref: '#/components/schemas/Address'
    WarehouseInventory:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        warehouseId:
          type: integer
          format: int64
          example: 123456
        productId:
          type: integer
          format: int64
          example: 123456
        quantity:
          type: integer
          format: int32
          example: 123456  
          
    
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    retailvaluechain_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://retailvaluechain.swagger.io/oauth/authorize
          scopes:
            write:rtvc: modify retail value chain in your account
            read:rtvc: read your retail value chain
    api_key:
      type: apiKey
      name: api_key
      in: header