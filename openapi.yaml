openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: sales
    description: Everything about Sales
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: retailer
    description: Everything about Retailer
    externalDocs:
      description: Find out more
      url: http://swagger.io    
  - name: retailer-inventory
    description: Everything about Retailer Inventory
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: shipment-order
    description: Everything about Shipment Order
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: warehouse
    description: Everything about Warehouse
    externalDocs:
      description: Find out more
      url: http://swagger.io       
  - name: warehouse-inventory
    description: Everything about Warehouse Inventory
    externalDocs:
      description: Find out more
      url: http://swagger.io      
  - name: varrier
    description: Everything about Carrier
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: product
    description: Everything about Product
    externalDocs:
      description: Find out more
      url: http://swagger.io  
  - name: supplier
    description: Everything about Supplier
    externalDocs:
      description: Find out more
      url: http://swagger.io  

paths:
  /sales:
    post:
      tags:
        - sales
      summary: Create a new sale
      description: Create a new sale
      operationId: createSale
      requestBody:
        description: Create a sale
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesData'
          application/xml:
            schema:
              $ref: '#/components/schemas/SalesData'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SalesData'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesData'          
            application/xml:
              schema:
                $ref: '#/components/schemas/SalesData'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /sales/{salesId}:
    get:
      tags:
        - sales
      summary: Get sale
      description: This can only be done by the logged in user.
      operationId: getSale
      parameters:
        - name: salesId
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Retailer'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Retailer'
  /retailer:
    post:
      tags:
        - retailer
      summary: Create a new retailer
      description: Create a new retailer
      operationId: createRetailer
      requestBody:
        description: Create a new retailer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Retailer'
          application/xml:
            schema:
              $ref: '#/components/schemas/Retailer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Retailer'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Retailer'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Retailer'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets          
  /retailer/{retailerId}:
    put:
      tags:
        - retailer
      summary: Update retailer
      description: This can only be done by the logged in user.
      operationId: updateRetailer
      parameters:
        - name: retailerId
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent retailer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Retailer'
          application/xml:
            schema:
              $ref: '#/components/schemas/Retailer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Retailer'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Retailer'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Retailer'
    get:
      tags:
        - retailer
      summary: Get retailer
      description: This can only be done by the logged in user.
      operationId: getRetailer
      parameters:
        - name: retailerId
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Retailer'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Retailer'
    delete:
      tags:
        - retailer
      summary: Delete retailer
      description: This can only be done by the logged in user.
      operationId: deleteRetailer
      parameters:
        - name: retailerId
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
  /retailer-inventory:
    post:
      tags:
        - retailer-inventory
      summary: Create a new sale
      description: Create a new sale
      operationId: createRetailerInventory
      requestBody:
        description: Create a sale
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesData'
          application/xml:
            schema:
              $ref: '#/components/schemas/SalesData'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SalesData'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesData'          
            application/xml:
              schema:
                $ref: '#/components/schemas/SalesData'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets  
  /shipment-order:
    post:
      tags:
        - shipment-order
      summary: Create a Shipment Order
      description: Create a Create a Shipment Order
      operationId: createShipmentOrder
      requestBody:
        description: Create a Shipment Order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShipmentOrder'
          application/xml:
            schema:
              $ref: '#/components/schemas/ShipmentOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ShipmentOrder'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShipmentOrder'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ShipmentOrder'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets  
  /shipment-order/{shipmentOrderId}:
    get:
      tags:
        - shipment-order
      summary: Get sale
      description: This can only be done by the logged in user.
      operationId: getShipmentOrderId
      parameters:
        - name: shipmentOrderId
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShipmentOrder'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ShipmentOrder'
  /warehouse-inventory:
    post:
      tags:
        - warehouse-inventory
      summary: Create a Warehouse
      description: Create a Warehouse
      operationId: createWarehouse
      requestBody:
        description: Create a Warehouse
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarehouseInventory'
          application/xml:
            schema:
              $ref: '#/components/schemas/WarehouseInventory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WarehouseInventory'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseInventory'          
            application/xml:
              schema:
                $ref: '#/components/schemas/WarehouseInventory'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets  
  /warehouse-inventory/{warehouseInventoryId}:
    get:
      tags:
        - warehouse-inventory
      summary: Get Warehouse Inventory
      description: This can only be done by the logged in user.
      operationId: getWarehouseInventory
      parameters:
        - name: warehouseInventoryId
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseInventory'          
            application/xml:
              schema:
                $ref: '#/components/schemas/WarehouseInventory'
  
  
  
  /pet:
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: ''
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: delete a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}/uploadImage:
    post:
      tags:
        - pet
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Address:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        zipcode:
          type: string
          example: '123456-78'
        country:
          type: string
          example: Brazil
        city:
          type: string
          example: 'São Paulo'
        neighborhood:
          type: string
          example: 'Jadrins'
        street:
          type: string
          example: 'Avenida Paulista'
        number:
          type: integer
          format: int32
          example: 1000 
      xml:
        name: address
    Carrier:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        description:
          type: string
          example: 'Description'
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        supplierId:
          type: integer
          format: int64
          example: 123456  
        description:
          type: string
          example: 'Description'
        price:
          type: number
          format: double
          example: '10.00'
    PurchaseOrder:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        retailerId:
          type: integer
          format: int64
          example: 123456
        address:
          $ref: '#/components/schemas/Address' 
        supplierId:
          type: integer
          format: int64
          example: 123456  
        items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderItem'  
        datetime:
          type: string
          description: RFC3339 Datetime to set
          format: date-time
          example: "2021-06-20T01:02:03+00:00"
    PurchaseOrderItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        productId:
          type: integer
          format: int64
          example: 123456  
        quantity:
          type: integer
          format: int32
          example: 123456 
    Retailer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        description:
          type: string
          example: '123456'
        address:
          $ref: '#/components/schemas/Address' 
    RetailerInventory:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        retailerId:
          type: integer
          format: int64
          example: 123456
        productId:
          type: integer
          format: int64
          example: 123456
        quantity:
          type: integer
          format: int32
          example: 123456  
    SalesData:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        clientId:
          type: integer
          format: int64
          example: 123456
        salesPrice:
          type: number
          format: double
          example: '10.00'  
        salesDate:
          type: string
          description: RFC3339 Datetime to set
          format: date-time
          example: "2021-06-20T01:02:03+00:00"
        items:
          type: array
          items:
            $ref: '#/components/schemas/SalesDataItem'  
    SalesDataItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        productId:
          type: integer
          format: int64
          example: 123456
        quantity:
          type: integer
          format: int32
          example: 123456
        price:
          type: number
          format: double
          example: '10.00'    
    ShipmentOrder:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        type:
          #ENUM
          type: integer
          format: int64
          example: 123456
        carrierId:
          type: integer
          format: int64
          example: 123456
        retailerId:
          type: integer
          format: int64
          example: 123456
        warehouseId:
          type: integer
          format: int64
          example: 123456
        senderAddress:
          $ref: '#/components/schemas/Address'
        recipientAddress:
          $ref: '#/components/schemas/Address'  
        status:
          #ENUM
          type: integer
          format: int64
          example: 123456
        items:
          type: array
          items:
            $ref: '#/components/schemas/ShipmentOrderItem'
    ShipmentOrderItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        purchaseOrderItemId:
          type: integer
          format: int64
          example: 123456
    Supplier:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        description:
          type: string
          example: 'description'
    Warehouse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        description:
          type: string
          example: 'description'
        address:
          $ref: '#/components/schemas/Address'
    WarehouseInventory:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        warehouseId:
          type: integer
          format: int64
          example: 123456
        productId:
          type: integer
          format: int64
          example: 123456
        quantity:
          type: integer
          format: int32
          example: 123456  
          
    
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header